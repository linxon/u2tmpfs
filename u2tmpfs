#!/usr/bin/env bash

################################################
## Defaults
################################################
# Blacklist users (by commas)
BLACKLIST_USERS="root"

# Where is save a user data (chmod 0740 USER_DATA_DIR)
USER_DATA_DIR="/var/lib/u2tmpfs"

# TMPFS size mount option (M — megabyte, G — gigabyte)
TMPFS_SIZE="512M"

# Other mount specified options (mount -o [..])
MOUNT_OPTS="mode=755,noatime"

################################################
## Body
################################################
if ! [ "`cat /proc/filesystems | grep -o -E "tmpfs$" | head -n1`" ]; then
	echo "Error: kernel is not support a temporary filesystem (tmpfs)"
	exit 1
else
	[ "$(/usr/bin/id -u)" != "0" ] && {
		echo "You need a root priveleges"
		exit 1
	}
fi

UPDATE_STAT=0
WIPE_STAT=${UPDATE_STAT}
_SCR_NAME=`basename "$0"`

print_help() {
	cat << EOF
Usage: ${_SCR_NAME} [-Uw] [-u USER1,USER2]
               [-d USER_DATA_DIR]
               [-s TMPFS_SIZE]
               [-o MOUNT_OPTS]

Simple script for automount home dir to tmpfs when your system is booting and extract all user data there. 

${_SCR_NAME} parameters:
  -u       Enter users (separated by commas. Example: user1,user2,etc)
  -d       Directory for user data files (for *.tar.xz. Default: ${USER_DATA_DIR})
  -U       Create/Update all *.tar.xz
  -s       tmpfs size option (mount -o size) (Example: 512M, 4G. Default: 512M)
  -o       Use the specified mount options for tmpfs (Default: "${MOUNT_OPTS}")
  -w       Wipe user data on USER_DATA_DIR for current USER (-u user1)

Example:
	1) Only init/update all users data without "mount -t tmpfs ...":
	     ${_SCR_NAME} -u user1,user2 -d ${USER_DATA_DIR} -U

	2) Mount users home dir to tmpfs and extract all users data:
	     ${_SCR_NAME} -u user1,user2 
	                                               
EOF
	exit
}

## Parse args
while [[ $# != 0 ]]; do
	case "$1" in
		-h ) print_help ;;

		-u ) USERS="$2" ; shift ;;

		-U ) UPDATE_STAT=1 ;;

		-d ) USER_DATA_DIR="$2" ; shift ;;

		-s ) TMPFS_SIZE="$2" ; shift ;;

		-o )
			echo "comming soon..."
			print_help
			;;

		-w ) WIPE_STAT=1 ;;

		* )
			echo "Unknown command: $1"
			print_help
			;;
	esac
	shift
done

check_args() {
	if ! [[ -z "${@}" ]]; then
		print_help
		exit
	fi

	if [ -z "${USERS}" ]; then
		echo "You need enter a command: -u <USER_NAME>"
		print_help
		exit 1
	fi

	if [ -z "${USER_DATA_DIR}" ]; then
		echo "You need enter a command: -d <USER_DATA_DIR>"
		print_help
		exit 1
	else
		[ -d "${USER_DATA_DIR}" ] || {
			echo "Directory \"${USER_DATA_DIR}\" — is not found!"
			exit 1
		}
	fi
}

check_bl() {
	local curr_user="$1"

	for bl_user in `echo "${BLACKLIST_USERS}" | tr "," "\n"`; do
		if [[ "${curr_user}" == "${bl_user}" ]] ; then
			return 1
		fi
	done
}

wipe_workfile() {
	local tmp_f="$1"

	if [ -f "${tmp_f}" ]; then
		/bin/rm -f "${tmp_f}" || return 1
	fi
}

is_login() {
	local curr_user="$1"

	if ! /usr/bin/w -sh "${curr_user}" > /dev/null; then
		return 1
	fi
}

check_memory() {
	local max_mem=`cat /proc/meminfo \
		| grep -E "^MemTotal:" \
		| grep -o -E "[0-9]{1,}"`

	if echo "${TMPFS_SIZE}" | grep -o -E "[0-9]{1,}M$" > /dev/null; then
		CUSTOM_SIZE="`echo "${TMPFS_SIZE}" \
			| grep -o -E "[0-9]{1,}M$" \
			| grep -o -E "^[0-9]{1,}"`000"

	elif echo "${TMPFS_SIZE}" | grep -o -E "[0-9]{1,}G$" > /dev/null; then
		CUSTOM_SIZE="`echo "${TMPFS_SIZE}" \
			| grep -o -E "[0-9]{1,}G$" \
			| grep -o -E "^[0-9]{1,}"`000000"

	elif echo "${TMPFS_SIZE}" | grep -o -E "[0-9]{1,}" > /dev/null; then
		CUSTOM_SIZE="`echo "${TMPFS_SIZE}" \
			| grep -o -E "[0-9]{1,}"`"
	fi

	if ! (( $((${max_mem}/2)) >= ${CUSTOM_SIZE} )); then
		return 1
	fi
}

update_user_data() {
	# custom args for /bin/tar
	local ex_params="$@"

	# get random string (6)
	RAND_STRING=`cat /dev/urandom \
		| tr -dc 'a-z0-9' \
		| fold -w 6 \
		| head -n 1`

	# Temp file...
	WORK_FILE_PATH="/tmp/${user_name}-${RAND_STRING}.tar.xz"

	[ -d "${USER_DATA_DIR}" ] || /bin/mkdir --mode=0740 -p "${USER_DATA_DIR}"
	/bin/tar -cJp --absolute-names \
			-f "${WORK_FILE_PATH}" \
			--anchored ${ex_params} "${USER_DIR}" \
			--xattrs > /dev/null && {

		local arch_size=`/usr/bin/du -sP "${WORK_FILE_PATH}" | grep -o -E "^[0-9]{1,}"`

		if [ -f ${ARCH_FILE} ]; then
			local md5_s=`/usr/bin/md5sum "${WORK_FILE_PATH}" | head -c 32`
			local md5_d=`/usr/bin/md5sum "${ARCH_FILE}" | head -c 32`

			[[ "${md5_s}" == "${md5_d}" ]] && {
				wipe_workfile "${WORK_FILE_PATH}" || return 1
				# is updated
				return
			}
		fi

		check_memory # get CUSTOM_SIZE
		if (( ${arch_size} <= ${CUSTOM_SIZE} )); then
			/bin/mv --force "${WORK_FILE_PATH}" "${ARCH_FILE}" || return 1
		else
			return 1
		fi
	} || return 1
}

extract_user_data() {
	# custom args for /bin/tar
	local ex_params="$@"
	local arch_size=`/usr/bin/du -sP ${ARCH_FILE} | grep -o -E "^[0-9]{1,}"`

	check_memory # get CUSTOM_SIZE
	if (( ${arch_size} <= ${CUSTOM_SIZE} )); then
		/bin/tar -xJp --skip-old-files \
				--absolute-names ${ex_params} \
				-f "${ARCH_FILE}" \
				-C "${USER_DIR}" \
				--xattrs > /dev/null || return 1
	else
		return 1
	fi
}

mount_tmpfs() {
	local udir="$1"
	local uid=$2
	local ugid=$3
	local size="$4"

	if mount | grep -E "^tmpfs" | grep ${udir} > /dev/null; then
		# skip mounting
		return
	else
		/bin/mount -o size=${size},uid=${uid},gid=${ugid},${MOUNT_OPTS} \
				-t tmpfs tmpfs "${udir}" > /dev/null || {
			return 1
		}
	fi
}

## Check args, get USERS and tune HOME dir...
check_args && for user_name in `echo "${USERS}" | tr "," "\n"`; do

	# required parameters
	if ! [ "`cat /etc/passwd | grep -E "^${user_name}"`" ]; then
		echo "User \"${user_name}\" is not found in your system!"
		continue
	else
		if is_login "${user_name}"; then
			echo "Please, send logout command for: \"${user_name}\""
#			continue
		fi
	fi

	C_USER=$(cat /etc/passwd \
		| grep -E "^${user_name}" \
		| cut -d ":" -f 3)
	C_GROUP=$(cat /etc/passwd \
		| grep -E "^${user_name}" \
		| cut -d ":" -f 4)
	USER_DIR=$(cat /etc/passwd \
		| grep -E "^${user_name}" \
		| cut -d ":" -f 6)
	ARCH_FILE="${USER_DATA_DIR}/${user_name}.tar.xz"

	if ! [ -d "${USER_DIR}" ]; then
		echo "\"${USER_DIR}\" — for ${user_name} is not found!"
		exit 1

	elif ! check_bl "${user_name}"; then
		echo "\"${user_name}\" — is not allowed!"

		# skip this user
		continue

	elif [ ${UPDATE_STAT} -eq 1 ]; then
		update_user_data && {
			# after update skip mount and extract user data...
			continue
		} || {
			wipe_workfile "${WORK_FILE_PATH}"
			echo "Error while updating the USER_DATA..."
			exit 1
		}

	# if ARCH_FILE is not found, you need update user data into...
	elif ! [ -f "${ARCH_FILE}" ]; then
		echo "You need update user data files (${_SCR_NAME} -U -u user1,user2)"
		print_help
		exit 1

	elif [ ${WIPE_STAT} -eq 1 ]; then
		wipe_workfile "${ARCH_FILE}"
		continue
	fi

	# Mount TMPFS to HOME dir (for this "user_name") and extract user data from ARCH_FILE
	if check_memory; then
		mount_tmpfs "${USER_DIR}" "${C_USER}" "${C_GROUP}" "${TMPFS_SIZE}" && {
			extract_user_data || {
				echo "Error while unpacking the USER_DATA..."
				exit 1
			}
		} || {
			echo "Error during mounting HOME dir (${USER_DIR}) to TMPFS"
			exit 1
		}
	else
		echo "${TMPFS_SIZE} — memory limit exceeded. Please, change TMPFS_SIZE param. (MAX_MEM / 2)"
		exit 1
	fi

done
